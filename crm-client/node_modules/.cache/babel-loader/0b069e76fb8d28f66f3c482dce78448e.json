{"ast":null,"code":"import axios from \"axios\";\nimport setJWTToken from \"../securityUtils/setJWTToken\";\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\nimport jwt_decode from \"jwt-decode\";\nexport const createNewUser = (newUser, history) => async dispatch => {\n  try {\n    await axios.post(\"http://localhost:8080/api/users/register\", newUser);\n    history.push(\"/login\");\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\nexport const login = loginRequest => async dispatch => {\n  try {\n    // post => login Request\n    const res = await axios.post(\"http://localhost:8080/api/users/login\", loginRequest); // extract token from res.data\n\n    const {\n      token\n    } = res.data; // store the token in the localStorage\n\n    localStorage.setItem(\"jwtToken\", token); // set our token in header ***\n\n    setJWTToken(token); // decode token on React\n\n    const decoded = jwt_decode(token); // dispatch to our securityReducer\n\n    dispatch({\n      type: SET_CURRENT_USER,\n      payload: decoded\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem(\"jwtToken\");\n  setJWTToken(false);\n  dispatch({\n    type: SET_CURRENT_USER,\n    payload: {}\n  });\n};","map":{"version":3,"sources":["C:/Users/DELL/Desktop/crm-fulltack/crm-client/src/actions/securityAction.js"],"names":["axios","setJWTToken","GET_ERRORS","SET_CURRENT_USER","jwt_decode","createNewUser","newUser","history","dispatch","post","push","type","payload","err","response","data","login","loginRequest","res","token","localStorage","setItem","decoded","logout","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,SAA7C;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,MAAMC,aAAa,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB,MAAOC,QAAP,IAAoB;AACrE,MAAI;AACF,UAAMR,KAAK,CAACS,IAAN,CAAW,0CAAX,EAAuDH,OAAvD,CAAN;AACAC,IAAAA,OAAO,CAACG,IAAR,CAAa,QAAb;AACAF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAET,UADC;AAEPU,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZL,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAET,UADC;AAEPU,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaC;AAFf,KAAD,CAAR;AAID;AACF,CAdM;AAeP,OAAO,MAAMC,KAAK,GAAIC,YAAD,IAAkB,MAAOT,QAAP,IAAoB;AACzD,MAAI;AACF;AACA,UAAMU,GAAG,GAAG,MAAMlB,KAAK,CAACS,IAAN,CAChB,uCADgB,EAEhBQ,YAFgB,CAAlB,CAFE,CAOF;;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAYD,GAAG,CAACH,IAAtB,CARE,CAUF;;AACAK,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAXE,CAaF;;AACAlB,IAAAA,WAAW,CAACkB,KAAD,CAAX,CAdE,CAeF;;AAEA,UAAMG,OAAO,GAAGlB,UAAU,CAACe,KAAD,CAA1B,CAjBE,CAkBF;;AACAX,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAER,gBADC;AAEPS,MAAAA,OAAO,EAAEU;AAFF,KAAD,CAAR;AAID,GAvBD,CAuBE,OAAOT,GAAP,EAAY;AACZL,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAET,UADC;AAEPU,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaC;AAFf,KAAD,CAAR;AAID;AACF,CA9BM;AA+BP,OAAO,MAAMQ,MAAM,GAAG,MAAOf,QAAD,IAAc;AACxCY,EAAAA,YAAY,CAACI,UAAb,CAAwB,UAAxB;AACAvB,EAAAA,WAAW,CAAC,KAAD,CAAX;AACAO,EAAAA,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAER,gBADC;AAEPS,IAAAA,OAAO,EAAE;AAFF,GAAD,CAAR;AAID,CAPM","sourcesContent":["import axios from \"axios\";\r\nimport setJWTToken from \"../securityUtils/setJWTToken\";\r\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\r\nimport jwt_decode from \"jwt-decode\";\r\nexport const createNewUser = (newUser, history) => async (dispatch) => {\r\n  try {\r\n    await axios.post(\"http://localhost:8080/api/users/register\", newUser);\r\n    history.push(\"/login\");\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: {},\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data,\r\n    });\r\n  }\r\n};\r\nexport const login = (loginRequest) => async (dispatch) => {\r\n  try {\r\n    // post => login Request\r\n    const res = await axios.post(\r\n      \"http://localhost:8080/api/users/login\",\r\n      loginRequest\r\n    );\r\n\r\n    // extract token from res.data\r\n    const { token } = res.data;\r\n\r\n    // store the token in the localStorage\r\n    localStorage.setItem(\"jwtToken\", token);\r\n\r\n    // set our token in header ***\r\n    setJWTToken(token);\r\n    // decode token on React\r\n\r\n    const decoded = jwt_decode(token);\r\n    // dispatch to our securityReducer\r\n    dispatch({\r\n      type: SET_CURRENT_USER,\r\n      payload: decoded,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data,\r\n    });\r\n  }\r\n};\r\nexport const logout = () => (dispatch) => {\r\n  localStorage.removeItem(\"jwtToken\");\r\n  setJWTToken(false);\r\n  dispatch({\r\n    type: SET_CURRENT_USER,\r\n    payload: {},\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}